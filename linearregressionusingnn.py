# -*- coding: utf-8 -*-
"""LinearRegressionUsingNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/172jV_gdlh2XDDiVnTKNo32NsXFanHGSq

# Task
Write a simple Python code for linear regression using a neural network with Keras. Generate synthetic data, build, compile, train, and evaluate the model. Visualize the results.

## Generate synthetic data

### Subtask:
Create synthetic data for linear regression.

**Reasoning**:
Generate synthetic data for linear regression using numpy as per the instructions.
"""

import numpy as np

# Generate 100 random values for the independent variable X
X = np.random.rand(100)

# Generate the dependent variable y with a linear relationship and noise
y = 2 * X + 1 + np.random.randn(100) * 0.1

"""## Build the model

### Subtask:
Define a simple neural network model for linear regression using Keras.

**Reasoning**:
Define a simple neural network model for linear regression using Keras.
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# Create a Sequential model
model = Sequential()

# Add a Dense layer with 1 unit and input shape of (1,)
model.add(Dense(1, input_shape=(1,)))

"""## Compile the model

### Subtask:
Compile the model by specifying the optimizer, loss function, and metrics.

**Reasoning**:
Compile the Keras model with the specified optimizer, loss function, and metrics.
"""

# Compile the model
model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_absolute_error'])

"""## Train the model

### Subtask:
Train the model on the synthetic data.

**Reasoning**:
Train the compiled Keras model on the synthetic data using the specified number of epochs and verbose output.
"""

# Train the model
history = model.fit(X, y, epochs=100, verbose=1)

"""## Evaluate the model

### Subtask:
Evaluate the trained model on the test data.

**Reasoning**:
Evaluate the trained model on the synthetic data using the `.evaluate()` method and print the results.
"""

# Evaluate the model on the data
loss, mae = model.evaluate(X, y, verbose=0)

# Print the evaluation results
print(f"Loss: {loss}")
print(f"Mean Absolute Error: {mae}")

"""## Make predictions

### Subtask:
Use the trained model to make predictions.

**Reasoning**:
Use the trained model to make predictions on the synthetic data X and store the results in y_pred.
"""

# Make predictions using the trained model
y_pred = model.predict(X)

"""## Visualize the results

### Subtask:
Plot the original data, the true linear function, and the predictions from the neural network.

**Reasoning**:
Plot the original data, the true function, and the model's predictions as requested in the instructions.
"""

import matplotlib.pyplot as plt

# Create a scatter plot of the original data
plt.scatter(X, y, label='Original Data')

# Create a scatter plot of the neural network's predictions
plt.scatter(X, y_pred, label='Neural Network Predictions')

# Plot the true linear function
plt.plot(X, 2 * X + 1, color='red', label='True Function')

# Add a legend to the plot
plt.legend()

# Add labels to the x and y axes
plt.xlabel('X')
plt.ylabel('y')

# Add a title to the plot
plt.title('Linear Regression with Neural Network')

# Display the plot
plt.show()

"""## Summary:

### Data Analysis Key Findings

*   Synthetic data was generated with a linear relationship ($y = 2 * X + 1$) and added noise, consisting of 100 data points for both the independent variable (X) and dependent variable (y).
*   A simple Keras Sequential model with a single Dense layer was built to perform linear regression.
*   The model was compiled using the 'adam' optimizer, 'mean\_squared\_error' as the loss function, and 'mean\_absolute\_error' as a metric.
*   The model was trained on the synthetic data for 100 epochs, with the training progress showing a decrease in both loss and mean absolute error.
*   The trained model was evaluated, resulting in a loss of approximately 0.4789 and a Mean Absolute Error (MAE) of approximately 0.6832.
*   Predictions were successfully made using the trained model on the input data.
*   A visualization was generated comparing the original data, the true underlying linear function, and the predictions made by the neural network.

### Insights or Next Steps

*   The neural network successfully approximated the linear relationship in the synthetic data, demonstrating its capability for linear regression tasks.
*   Further optimization of the model's hyperparameters (e.g., optimizer, learning rate, number of epochs) could potentially improve the accuracy and reduce the evaluation metrics.

"""